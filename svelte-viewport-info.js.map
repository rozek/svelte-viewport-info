{"version":3,"file":"svelte-viewport-info.js","sources":["svelte-viewport-info.ts"],"sourcesContent":["  let MediaMatcher = (\n    window.matchMedia ||\n// @ts-ignore\n    window['webkitMatchmedia'] || window['mozMatchmedia'] || window['oMatchmedia']\n  )\n\n  function MediaQuery (query:string):boolean {\n    return (MediaMatcher != null) && MediaMatcher(query).matches\n  }\n\n  /**** determineViewportSize ****/\n  // Internet Explorer and MS/Edge are NOT supported\n\n    let ViewportWidth:number  = 0     // given in px, explicit initialization...\n    let ViewportHeight:number = 0        // ...is needed to satisfy the compiler\n\n    function determineViewportSize ():void {\n      ViewportWidth = Math.max(\n        document.documentElement.clientWidth  || 0, window.innerWidth  || 0\n      )\n      ViewportHeight = Math.max(\n        document.documentElement.clientHeight || 0, window.innerHeight || 0\n      )\n    }\n    // see https://stackoverflow.com/questions/1248081/get-the-browser-viewport-dimensions-with-javascript\n\n    determineViewportSize()\n  /**** determineScreenOrientation ****/\n\n    let ScreenOrientation:'portrait'|'landscape'\n    let detailledScreenOrientation:'portrait-primary'|'portrait-secondary'|'landscape-primary'|'landscape-secondary'|undefined\n\n    function determineScreenOrientation ():void {\n      let Orientation\n        if ('orientation' in window.Screen) {\n          Orientation = window.screen.orientation.type\n        }\n      switch (Orientation) {\n        case 'portrait-primary':\n        case 'portrait-secondary':\n          ScreenOrientation          = 'portrait'\n          detailledScreenOrientation = Orientation\n          break\n        case 'landscape-primary':\n        case 'landscape-secondary':\n          ScreenOrientation          = 'landscape'\n          detailledScreenOrientation = Orientation\n          break\n        default:\n          switch (true) {\n            case MediaQuery('(orientation:portrait)'):  ScreenOrientation = 'portrait';  break\n            case MediaQuery('(orientation:landscape)'):\n            case ViewportWidth > ViewportHeight:        ScreenOrientation = 'landscape'; break\n            default:                                    ScreenOrientation = 'portrait'\n          }\n          detailledScreenOrientation = undefined\n      }\n\n      document.body.classList.remove(\n        'Portrait','Landscape','Portrait-primary','Portrait-secondary',\n        'Landscape-primary','Landscape-secondary'\n      )\n\n      switch (ScreenOrientation) {\n        case 'portrait':  document.body.classList.add('Portrait');  break\n        case 'landscape': document.body.classList.add('Landscape'); break\n      }\n      if (detailledScreenOrientation != null) {\n        const capitalized = (Name:string) => Name[0].toUpperCase() + Name.slice(1)\n        document.body.classList.add(capitalized(detailledScreenOrientation))\n      }\n    }\n\n    determineScreenOrientation()                   // uses viewport_width/height\n\n  /**** handle problem that \"orientationchange\" is fired too soon ****/\n\n    let oldViewportWidth  = ViewportWidth\n    let oldViewportHeight = ViewportHeight\n\n    function rememberSettings ():void {\n      oldViewportWidth  = ViewportWidth\n      oldViewportHeight = ViewportHeight\n    }\n\n    function submitEvents ():void {\n      document.body.dispatchEvent(\n        new Event('viewportchanged', { bubbles:true, cancelable:true })\n      )\n      document.body.dispatchEvent(\n        new Event('orientationchangeend', { bubbles:true, cancelable:true })\n      )\n    }\n\n    let   Poller:any   // right now, it's difficult to determine the proper type\n    let   PollCounter      = 0\n    const PollCounterLimit = 10               // i.e., stop polling after 1000ms\n\n    function stopPolling ():void {\n      clearInterval(Poller)\n\n      Poller      = undefined\n      PollCounter = 0\n    }\n\n    function pollForViewportAfterOrientationChange ():void {\n      Poller = setInterval(function () {\n        determineViewportSize()\n        if (                // no update of screen size yet? => continue polling\n          (oldViewportWidth  === ViewportWidth) &&\n          (oldViewportHeight === ViewportHeight)\n        ) {\n          PollCounter += 1\n          if (PollCounter <= PollCounterLimit) { return }\n        }     // nota bene: sometimes viewport does not change (e.g., in iframe)\n\n        stopPolling()\n\n        determineScreenOrientation()   // uses viewport_width/height as fallback\n        rememberSettings()\n        submitEvents()\n      }, 100)\n    }\n\n  /**** handler for \"orientationchange\" event ****/\n\n    function determineViewportSizeAndScreenOrientation ():void {\n      determineViewportSize()\n      determineScreenOrientation() // uses screen_width/height as final fallback\n\n      if (Poller != null) {      // we are still polling because of former event\n        stopPolling()\n        rememberSettings()\n        submitEvents()\n      }\n\n      if (\n        (oldViewportWidth  === ViewportWidth) &&\n        (oldViewportHeight === ViewportHeight)\n      ) {        // screen size did not (yet) change => start polling for change\n        pollForViewportAfterOrientationChange()\n      } else {                   // viewport size changed in time => do not poll\n        rememberSettings()\n        submitEvents()\n      }\n    }\n  // see https://github.com/gajus/orientationchangeend\n\n  /**** update on changes ****/\n\n    window.addEventListener('orientationchange', function () {\n      setTimeout(determineViewportSizeAndScreenOrientation,10)\n    })// seen on iOS 12: \"orientationchange\" fired before orientation is updated\n\n    window.addEventListener('resize', determineViewportSizeAndScreenOrientation)\n\n  export default {\n    get Width ()  { return ViewportWidth },\n    get Height () { return ViewportHeight },\n\n    get Orientation () { return ScreenOrientation },\n  }\n\n"],"names":["MediaMatcher","window","matchMedia","MediaQuery","query","matches","ScreenOrientation","detailledScreenOrientation","ViewportWidth","ViewportHeight","determineViewportSize","Math","max","document","documentElement","clientWidth","innerWidth","clientHeight","innerHeight","determineScreenOrientation","Orientation","Name","Screen","screen","orientation","type","undefined","body","classList","remove","add","toUpperCase","slice","Poller","oldViewportWidth","oldViewportHeight","rememberSettings","submitEvents","dispatchEvent","Event","bubbles","cancelable","PollCounter","stopPolling","clearInterval","determineViewportSizeAndScreenOrientation","setInterval","addEventListener","setTimeout","Width","Height"],"mappings":"2TAAE,IAAIA,EACFC,OAAOC,YAEPD,OAAyB,kBAAKA,OAAsB,eAAKA,OAAoB,YAG/E,SAASE,EAAYC,GACnB,OAAwB,MAAhBJ,GAAyBA,EAAaI,GAAOC,QAMrD,IAgBIC,EACAC,EAjBAC,EAAwB,EACxBC,EAAwB,EAE5B,SAASC,IACPF,EAAgBG,KAAKC,IACnBC,SAASC,gBAAgBC,aAAgB,EAAGd,OAAOe,YAAe,GAEpEP,EAAiBE,KAAKC,IACpBC,SAASC,gBAAgBG,cAAgB,EAAGhB,OAAOiB,aAAe,GAWtE,SAASC,IACP,IAAIC,EAmCmBC,EA/BvB,OAHM,gBAAiBpB,OAAOqB,SAC1BF,EAAcnB,OAAOsB,OAAOC,YAAYC,MAEpCL,GACN,IAAK,mBACL,IAAK,qBACHd,EAA6B,WAC7BC,EAA6Ba,EAC7B,MACF,IAAK,oBACL,IAAK,sBACHd,EAA6B,YAC7BC,EAA6Ba,EAC7B,MACF,QACE,QAAQ,GACN,KAAKjB,EAAW,0BAA4BG,EAAoB,WAAa,MAC7E,KAAKH,EAAW,2BAChB,KAAKK,EAAgBC,EAAuBH,EAAoB,YAAa,MAC7E,QAA4CA,EAAoB,WAElEC,OAA6BmB,EAQjC,OALAb,SAASc,KAAKC,UAAUC,OACtB,WAAW,YAAY,mBAAmB,qBAC1C,oBAAoB,uBAGdvB,GACN,IAAK,WAAaO,SAASc,KAAKC,UAAUE,IAAI,YAAc,MAC5D,IAAK,YAAajB,SAASc,KAAKC,UAAUE,IAAI,aAEhD,GAAkC,MAA9BvB,EAAoC,CAEtCM,SAASc,KAAKC,UAAUE,KADHT,EACmBd,GADE,GAAGwB,cAAgBV,EAAKW,MAAM,KA1C5EtB,IA+CAS,IAIA,IAiBMc,EAjBFC,EAAoB1B,EACpB2B,EAAoB1B,EAExB,SAAS2B,IACPF,EAAoB1B,EACpB2B,EAAoB1B,EAGtB,SAAS4B,IACPxB,SAASc,KAAKW,cACZ,IAAIC,MAAM,kBAAmB,CAAEC,SAAQ,EAAMC,YAAW,KAE1D5B,SAASc,KAAKW,cACZ,IAAIC,MAAM,uBAAwB,CAAEC,SAAQ,EAAMC,YAAW,KAKjE,IAAMC,EAAmB,EAGzB,SAASC,IACPC,cAAcX,GAEdA,OAAcP,EACdgB,EAAc,EAwBhB,SAASG,IACPnC,IACAS,IAEc,MAAVc,IACFU,IACAP,IACAC,KAICH,IAAsB1B,GACtB2B,IAAsB1B,EAhCzBwB,EAASa,aAAY,WACnBpC,IAEGwB,IAAsB1B,GACtB2B,IAAsB1B,IAEvBiC,GAAe,IAhBI,KAoBrBC,IAEAxB,IACAiB,IACAC,OACC,MAqBDD,IACAC,YAOJpC,OAAO8C,iBAAiB,qBAAqB,WAC3CC,WAAWH,EAA0C,OAGvD5C,OAAO8C,iBAAiB,SAAUF,GAErB,CACbI,YAAgB,OAAOzC,GACvB0C,aAAgB,OAAOzC,GAEvBW,kBAAqB,OAAOd"}