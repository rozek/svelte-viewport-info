{"version":3,"file":"svelte-viewport-info.js","sources":["../src/svelte-viewport-info.ts"],"sourcesContent":["//----------------------------------------------------------------------------//\n//                            Svelte Viewport Info                            //\n//----------------------------------------------------------------------------//\n\n  let MediaMatcher = (\n    window.matchMedia ||\n// @ts-ignore\n    window['webkitMatchmedia'] || window['mozMatchmedia'] || window['oMatchmedia']\n  )\n\n  function MediaQuery (query:string):boolean {\n    return (MediaMatcher != null) && MediaMatcher(query).matches\n  }\n\n  function DocumentIsReady ():boolean {\n    return (\n      (document.readyState === 'interactive') ||\n      (document.readyState === 'complete')\n    )\n  }\n\n  /**** determineViewportSize ****/\n  // Internet Explorer and MS/Edge are NOT supported\n\n    let ViewportWidth:number  = 0     // given in px, explicit initialization...\n    let ViewportHeight:number = 0        // ...is needed to satisfy the compiler\n\n    function determineViewportSize ():void {\n      ViewportWidth = Math.max(\n        document.documentElement.clientWidth  || 0, window.innerWidth  || 0\n      )\n      ViewportHeight = Math.max(\n        document.documentElement.clientHeight || 0, window.innerHeight || 0\n      )\n    }\n    // see https://stackoverflow.com/questions/1248081/get-the-browser-viewport-dimensions-with-javascript\n\n    determineViewportSize()\n  /**** determineScreenOrientation ****/\n\n    type Orientation          = 'portrait'|'landscape'\n    type detailledOrientation = 'portrait-primary'|'portrait-secondary'|'landscape-primary'|'landscape-secondary'\n\n    let ScreenOrientation:Orientation|undefined                   = undefined\n    let detailledScreenOrientation:detailledOrientation|undefined = undefined\n                        // explicit initialization is needed to satisfy compiler\n\n    function determineScreenOrientation ():void {\n      let Orientation\n        if ('orientation' in window.Screen) {\n          Orientation = window.screen.orientation.type\n        }\n      switch (Orientation) {\n        case 'portrait-primary':\n        case 'portrait-secondary':\n          ScreenOrientation          = 'portrait'\n          detailledScreenOrientation = Orientation\n          break\n        case 'landscape-primary':\n        case 'landscape-secondary':\n          ScreenOrientation          = 'landscape'\n          detailledScreenOrientation = Orientation\n          break\n        default:\n          switch (true) {\n            case MediaQuery('(orientation:portrait)'):  ScreenOrientation = 'portrait';  break\n            case MediaQuery('(orientation:landscape)'):\n            case ViewportWidth > ViewportHeight:        ScreenOrientation = 'landscape'; break\n            default:                                    ScreenOrientation = 'portrait'\n          }\n          detailledScreenOrientation = undefined\n      }\n\n      if (DocumentIsReady()) {\n        document.body.classList.remove(\n          'Portrait','Landscape','Portrait-primary','Portrait-secondary',\n          'Landscape-primary','Landscape-secondary'\n        )\n\n        switch (ScreenOrientation) {\n          case 'portrait':  document.body.classList.add('Portrait');  break\n          case 'landscape': document.body.classList.add('Landscape'); break\n        }\n        if (detailledScreenOrientation != null) {\n          const capitalized = (Name:string) => Name[0].toUpperCase() + Name.slice(1)\n          document.body.classList.add(capitalized(detailledScreenOrientation))\n        }\n      }\n    }\n\n    determineScreenOrientation()\n\n    if (! DocumentIsReady()) {\n      window.addEventListener('DOMContentLoaded', determineScreenOrientation)\n    }           // after document is loaded, classes will be applied as foreseen\n\n  /**** handle problem that \"orientationchange\" is fired too soon ****/\n\n    let oldViewportWidth  = ViewportWidth\n    let oldViewportHeight = ViewportHeight\n\n    let oldScreenOrientation:Orientation|undefined                   = ScreenOrientation\n    let oldDetailledScreenOrientation:detailledOrientation|undefined = detailledScreenOrientation\n\n    function rememberSettings ():void {\n      oldViewportWidth  = ViewportWidth\n      oldViewportHeight = ViewportHeight\n\n      oldScreenOrientation          = ScreenOrientation\n      oldDetailledScreenOrientation = detailledScreenOrientation\n    }\n\n    function submitEvents ():void {\n      if (! DocumentIsReady()) { return }\n\n      if ((oldViewportWidth !== ViewportWidth) || (oldViewportHeight !== ViewportHeight)) {\n        document.body.dispatchEvent(\n          new Event('viewportchanged', { bubbles:true, cancelable:true })\n        )\n      }\n\n      if (\n        (oldScreenOrientation          !== ScreenOrientation) ||\n        (oldDetailledScreenOrientation !== detailledScreenOrientation)\n      ) {\n        document.body.dispatchEvent(\n          new Event('orientationchangeend', { bubbles:true, cancelable:true })\n        )\n      }\n    }\n\n    let   Poller:any   // right now, it's difficult to determine the proper type\n    let   PollCounter      = 0\n    const PollCounterLimit = 10               // i.e., stop polling after 1000ms\n\n    function stopPolling ():void {\n      clearInterval(Poller)\n\n      Poller      = undefined\n      PollCounter = 0\n    }\n\n    function pollForViewportAfterOrientationChange ():void {\n      Poller = setInterval(function () {\n        determineViewportSize()\n        if (                // no update of screen size yet? => continue polling\n          (oldViewportWidth  === ViewportWidth) &&\n          (oldViewportHeight === ViewportHeight)\n        ) {\n          PollCounter += 1\n          if (PollCounter <= PollCounterLimit) { return }\n        }     // nota bene: sometimes viewport does not change (e.g., in iframe)\n\n        stopPolling()\n\n        determineScreenOrientation()    // uses ViewportWidth/Height as fallback\n        submitEvents()\n        rememberSettings()\n      }, 100)\n    }\n\n  /**** handler for \"orientationchange\" event ****/\n\n    function determineViewportSizeAndScreenOrientation ():void {\n      determineViewportSize()\n      determineScreenOrientation() // uses screen_width/height as final fallback\n\n      if (Poller != null) {      // we are still polling because of former event\n        stopPolling()\n        submitEvents()\n        rememberSettings()\n      }\n\n      if (\n        (oldViewportWidth  === ViewportWidth) &&\n        (oldViewportHeight === ViewportHeight)\n      ) {        // screen size did not (yet) change => start polling for change\n        pollForViewportAfterOrientationChange()\n      } else {                   // viewport size changed in time => do not poll\n        submitEvents()\n        rememberSettings()\n      }\n    }\n  // see https://github.com/gajus/orientationchangeend\n\n  /**** update on changes ****/\n\n    window.addEventListener('orientationchange', function () {\n      setTimeout(determineViewportSizeAndScreenOrientation,10)\n    })// seen on iOS 12: \"orientationchange\" fired before orientation is updated\n\n    window.addEventListener('resize', determineViewportSizeAndScreenOrientation)\n\n    if ('orientation' in screen) {\n      screen.orientation.addEventListener('change', function () {\n        setTimeout(determineViewportSizeAndScreenOrientation,10)\n      })\n    }\n\n\n  export default {\n    get Width ()  { return ViewportWidth },\n    get Height () { return ViewportHeight },\n\n    get Orientation ()          { return ScreenOrientation },\n    get detailledOrientation () { return detailledScreenOrientation },\n  }\n\n"],"names":["MediaMatcher","window","matchMedia","MediaQuery","query","matches","DocumentIsReady","document","readyState","ViewportWidth","ViewportHeight","determineViewportSize","Math","max","documentElement","clientWidth","innerWidth","clientHeight","innerHeight","ScreenOrientation","undefined","detailledScreenOrientation","determineScreenOrientation","Orientation","Name","Screen","screen","orientation","type","body","classList","remove","add","toUpperCase","slice","addEventListener","Poller","oldViewportWidth","oldViewportHeight","oldScreenOrientation","oldDetailledScreenOrientation","rememberSettings","submitEvents","dispatchEvent","Event","bubbles","cancelable","PollCounter","stopPolling","clearInterval","determineViewportSizeAndScreenOrientation","setInterval","setTimeout","Width","Height","detailledOrientation"],"mappings":"2TAIE,IAAIA,EACFC,OAAOC,YAEPD,OAAyB,kBAAKA,OAAsB,eAAKA,OAAoB,YAG/E,SAASE,EAAYC,GACnB,OAAwB,MAAhBJ,GAAyBA,EAAaI,GAAOC,QAGvD,SAASC,IACP,MAC2B,gBAAxBC,SAASC,YACe,aAAxBD,SAASC,WAOZ,IAAIC,EAAwB,EACxBC,EAAwB,EAE5B,SAASC,IACPF,EAAgBG,KAAKC,IACnBN,SAASO,gBAAgBC,aAAgB,EAAGd,OAAOe,YAAe,GAEpEN,EAAiBE,KAAKC,IACpBN,SAASO,gBAAgBG,cAAgB,EAAGhB,OAAOiB,aAAe,GAKtEP,IAMA,IAAIQ,OAA4DC,EAC5DC,OAA4DD,EAGhE,SAASE,IACP,IAAIC,EAoCqBC,EAhCzB,OAHM,gBAAiBvB,OAAOwB,SAC1BF,EAActB,OAAOyB,OAAOC,YAAYC,MAEpCL,GACN,IAAK,mBACL,IAAK,qBACHJ,EAA6B,WAC7BE,EAA6BE,EAC7B,MACF,IAAK,oBACL,IAAK,sBACHJ,EAA6B,YAC7BE,EAA6BE,EAC7B,MACF,QACE,QAAQ,GACN,KAAKpB,EAAW,0BAA4BgB,EAAoB,WAAa,MAC7E,KAAKhB,EAAW,2BAChB,KAAKM,EAAgBC,EAAuBS,EAAoB,YAAa,MAC7E,QAA4CA,EAAoB,WAElEE,OAA6BD,EAGjC,GAAId,IAAmB,CAMrB,OALAC,SAASsB,KAAKC,UAAUC,OACtB,WAAW,YAAY,mBAAmB,qBAC1C,oBAAoB,uBAGdZ,GACN,IAAK,WAAaZ,SAASsB,KAAKC,UAAUE,IAAI,YAAc,MAC5D,IAAK,YAAazB,SAASsB,KAAKC,UAAUE,IAAI,aAEhD,GAAkC,MAA9BX,EAAoC,CAEtCd,SAASsB,KAAKC,UAAUE,KADHR,EACmBH,GADE,GAAGY,cAAgBT,EAAKU,MAAM,MAM9EZ,IAEMhB,KACJL,OAAOkC,iBAAiB,mBAAoBb,GAK9C,IAiCMc,EAjCFC,EAAoB5B,EACpB6B,EAAoB5B,EAEpB6B,EAA+DpB,EAC/DqB,EAA+DnB,EAEnE,SAASoB,IACPJ,EAAoB5B,EACpB6B,EAAoB5B,EAEpB6B,EAAgCpB,EAChCqB,EAAgCnB,EAGlC,SAASqB,IACDpC,MAED+B,IAAqB5B,GAAmB6B,IAAsB5B,GACjEH,SAASsB,KAAKc,cACZ,IAAIC,MAAM,kBAAmB,CAAEC,SAAQ,EAAMC,YAAW,KAKzDP,IAAkCpB,GAClCqB,IAAkCnB,GAEnCd,SAASsB,KAAKc,cACZ,IAAIC,MAAM,uBAAwB,CAAEC,SAAQ,EAAMC,YAAW,MAMnE,IAAMC,EAAmB,EAGzB,SAASC,IACPC,cAAcb,GAEdA,OAAchB,EACd2B,EAAc,EAwBhB,SAASG,IACPvC,IACAW,IAEc,MAAVc,IACFY,IACAN,IACAD,KAICJ,IAAsB5B,GACtB6B,IAAsB5B,EAhCzB0B,EAASe,aAAY,WACnBxC,IAEG0B,IAAsB5B,GACtB6B,IAAsB5B,IAEvBqC,GAAe,IAhBI,KAoBrBC,IAEA1B,IACAoB,IACAD,OACC,MAqBDC,IACAD,YAOJxC,OAAOkC,iBAAiB,qBAAqB,WAC3CiB,WAAWF,EAA0C,OAGvDjD,OAAOkC,iBAAiB,SAAUe,GAE9B,gBAAiBxB,QACnBA,OAAOC,YAAYQ,iBAAiB,UAAU,WAC5CiB,WAAWF,EAA0C,OAK5C,CACbG,YAAgB,OAAO5C,GACvB6C,aAAgB,OAAO5C,GAEvBa,kBAA8B,OAAOJ,GACrCoC,2BAA8B,OAAOlC"}